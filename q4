import numpy as np

# Activation function and its derivative (Sigmoid function)
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Artificial Neural Network class
class NeuralNetwork:
    def _init_(self, input_size, hidden_size, output_size, learning_rate=0.1):
        # Initialize weights and biases
        self.learning_rate = learning_rate
        self.weights_input_hidden = np.random.rand(input_size, hidden_size)
        self.bias_hidden = np.random.rand(hidden_size)
        self.weights_hidden_output = np.random.rand(hidden_size, output_size)
        self.bias_output = np.random.rand(output_size)
    
    # Forward propagation
    def forward(self, X):
        # Calculate hidden layer activations
        self.hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
        self.hidden_output = sigmoid(self.hidden_input)
        
        # Calculate output layer activations
        self.output_input = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_output
        self.output = sigmoid(self.output_input)
        
        return self.output
    
    # Backpropagation
    def backward(self, X, y, output):
        # Output layer error and gradient
        output_error = y - output
        output_delta = output_error * sigmoid_derivative(output)
        
        # Hidden layer error and gradient
        hidden_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_delta = hidden_error * sigmoid_derivative(self.hidden_output)
        
        # Update weights and biases
        self.weights_hidden_output += self.hidden_output.T.dot(output_delta) * self.learning_rate
        self.bias_output += np.sum(output_delta, axis=0) * self.learning_rate
        self.weights_input_hidden += X.T.dot(hidden_delta) * self.learning_rate
        self.bias_hidden += np.sum(hidden_delta, axis=0) * self.learning_rate

    # Training function
    def train(self, X, y, epochs=10000):
        for epoch in range(epochs):
            # Forward and backward passes
            output = self.forward(X)
            self.backward(X, y, output)
            
            # Print loss every 1000 epochs
            if epoch % 1000 == 0:
                loss = np.mean(np.square(y - output))
                print(f"Epoch {epoch}, Loss: {loss}")

    # Prediction function
    def predict(self, X):
        return self.forward(X)

# Dataset (XOR problem)
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  # Input data
y = np.array([[0], [1], [1], [0]])              # Expected output

# Initialize and train the neural network
nn = NeuralNetwork(input_size=2, hidden_size=2, output_size=1, learning_rate=0.1)
nn.train(X, y, epochs=10000)

# Test the neural network
print("\nPredictions after training:")
for i in range(len(X)):
    print(f"Input: {X[i]}, Predicted Output: {nn.predict(X[i])}, Expected Output: {y[i]}")
