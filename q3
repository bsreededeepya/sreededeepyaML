import pandas as pd
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt

# Load the dataset (replace this with your actual data file)
filename = "play_tennis.csv"  # Replace with the path to your data file
data = pd.read_csv(filename)

# Display first few rows to understand the structure
print("Dataset sample:")
print(data.head())

# Convert categorical variables into numeric for decision tree processing
data = pd.get_dummies(data, columns=['Outlook', 'Temperature', 'Humidity', 'Windy'])

# Define features (X) and target (y)
X = data.drop(columns=['PlayTennis'])  # Feature columns
y = data['PlayTennis']                 # Target column

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize and train the classifier using the entropy criterion (ID3 algorithm)
clf = DecisionTreeClassifier(criterion='entropy', random_state=42)
clf.fit(X_train, y_train)

# Predict on the test data
y_pred = clf.predict(X_test)

# Calculate and display the accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy * 100:.2f}%")

# Display the classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Plot the decision tree
plt.figure(figsize=(12, 8))
plot_tree(clf, feature_names=X.columns, class_names=['No', 'Yes'], filled=True, rounded=True)
plt.title("Decision Tree using ID3 Algorithm")
plt.show()

# Classify a new sample
# Example: [Outlook=Sunny, Temperature=Hot, Humidity=High, Windy=False]
# Convert new sample to match the one-hot encoding used during training
new_sample = pd.DataFrame({
    'Outlook_Overcast': [0], 'Outlook_Rain': [0], 'Outlook_Sunny': [1],
    'Temperature_Cool': [0], 'Temperature_Hot': [1], 'Temperature_Mild': [0],
    'Humidity_High': [1], 'Humidity_Normal': [0],
    'Windy_False': [1], 'Windy_True': [0]
})

new_prediction = clf.predict(new_sample)
print("\nPrediction for new sample (PlayTennis):", "Yes" if new_prediction[0] == 1 else "No")
